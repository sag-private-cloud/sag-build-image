name: "Perform docker image build for webMethods based images"
description: "Perform docker image build for webMethods based images, including packages installation"

inputs:
  context:
    required: true
    description: "The docker build context"
  dockerfile:
    required: true
    description: "The dockerfile to use for the build"
  image-name:
    required: true
    description: "The full name of the image to build"
  base-runtime: 
    required: false
    description: "The base runtime image to use"
  builder-number:
    required: false
    description: "The build number to pass as buildnumber build-arg to the docker build process"
  extra-args:
    required: false
    description: "The extra arguments (build-args) to pass to the docker build process"
  wpm-registry-server:
    required: false
    default: https://packages.webmethods.io
    description: "The webMethods packages registry server to use for pulling packages"
  custom-packages-org-url:
    required: false
    description: "The GitHub organization URL for pulling custom packages located in GitHub"
  wpm-registry:
    required: false
    default: softwareag
    description: "The webMethods packages registry to use from the webMethods packages registry server"
  wpm-registry-token:
    required: true
    description: "The webMethods packages registry authentication token"
  packages:
    required: false
    description: "Packages to install, registered in the webMethods packages registry, seperated by space (e.g. 'WmPackage1 WmPackage2')"
  custom-packages:
    required: false
    description: "Custom Packages to install, located in the specified GitHub organization, seperated by space (e.g. 'CustomPackage1:main CustomPackage2:v1')"
  
outputs:
  image-name:
    description: "The full name of the built image"
    value: ${{ inputs.image-name }}
  image-repository:
    description: "The repository part of the built image"
    value: ${{ steps.setenv.outputs.image-repository }}
  image-tag:
    description: "The tag part of the built image"
    value: ${{ steps.setenv.outputs.image-tag }}

runs:
  using: "composite"
  steps:
    - name: Set env
      id: setenv
      shell: bash
      run: |
        echo "base-runtime-arg=$(baseRuntime='${{ inputs.base-runtime }}' && [ -z $baseRuntime ] && echo '' || echo "--build-arg baseruntime=$baseRuntime")" >> $GITHUB_OUTPUT
        echo "builder-number-arg=$(builderNumber='${{ inputs.builder-number }}' && [ -z $builderNumber ] && echo '' || echo "--build-arg buildnumber=$builderNumber")" >> $GITHUB_OUTPUT
        echo "wpm-registry-server-arg=$(wpmRegistryServer='${{ inputs.wpm-registry-server }}' && [ -z $wpmRegistryServer ] && echo '' || echo "--build-arg wpmregistryserver=$wpmRegistryServer")" >> $GITHUB_OUTPUT
        echo "wpm-registry-arg=$(wpmRegistry='${{ inputs.wpm-registry }}' && [ -z $wpmRegistry ] && echo '' || echo "--build-arg wpmregistry=$wpmRegistry")" >> $GITHUB_OUTPUT
        echo "wpm-registry-token-arg=$(wpmRegistryToken='${{ inputs.wpm-registry-token }}' && [ -z $wpmRegistryToken ] && echo '' || echo "--build-arg wpmregistrytoken=$wpmRegistryToken")" >> $GITHUB_OUTPUT
        echo "packages-arg=$(packages='${{ inputs.packages }}' && [ -z $packages ] && echo '' || echo "--build-arg packages=\"$packages\"")" >> $GITHUB_OUTPUT
        echo "custom-packages-arg=$(customPackages='${{ inputs.custom-packages }}' && [ -z $customPackages ] && echo '' || echo "--build-arg custompackages=\"$customPackages\"")" >> $GITHUB_OUTPUT
        echo "custom-packages-org-url-arg=$(customPackagesOrgUrl='${{ inputs.custom-packages-org-url }}' && [ -z $customPackagesOrgUrl ] && echo '' || echo "--build-arg custompackagesorgurl=\"$customPackagesOrgUrl\"")" >> $GITHUB_OUTPUT

        # Prepare action outputs
        imageName=${{ inputs.image-name }}
        imageRepository="${imageName%:*}"
        imageTag="${imageName##*:}"
        echo "image-repository=$imageRepository" >> $GITHUB_OUTPUT
        echo "image-tag=$imageTag" >> $GITHUB_OUTPUT
    
    - name: Validate dockerfile
      shell: bash
      run: |
        $GITHUB_ACTION_PATH/scripts/check.sh "${{ inputs.dockerfile }}" "${{ inputs.packages }}"

    - name: Invoke Docker build
      id: build-image
      shell: bash
      run: |
        buildStarted=$SECONDS
        # in case build failed we need this variable to exist
        echo "build-duration-seconds=''" >> $GITHUB_OUTPUT

        docker build -t ${{ inputs.image-name }} -f ${{ inputs.dockerfile }} ${{ inputs.context }} ${{ steps.setenv.outputs.base-runtime-arg }} ${{ steps.setenv.outputs.builder-number-arg }} ${{ steps.setenv.outputs.wpm-registry-server-arg }} ${{ steps.setenv.outputs.wpm-registry-arg }} ${{ steps.setenv.outputs.wpm-registry-token-arg }} ${{ steps.setenv.outputs.packages-arg }} ${{ steps.setenv.outputs.custom-packages-arg }}  ${{ steps.setenv.outputs.custom-packages-org-url-arg }} ${{ inputs.extra-args }}

        buildEnd=$SECONDS
        echo "build-duration-seconds=$((buildEnd - buildStarted))" >> $GITHUB_OUTPUT
        echo "promotion-image-size=$(docker images ${{ inputs.image-name }} --format "{{.Size}}")" >> $GITHUB_OUTPUT

    - name: Include summary
      shell: bash
      run: |
        echo "Including step summary..."
        echo "|Name|Value|" >> $GITHUB_STEP_SUMMARY
        echo "|:-:|:-:|" >> $GITHUB_STEP_SUMMARY
        echo "|Image full name|${{ inputs.image-name }}|" >> $GITHUB_STEP_SUMMARY
        echo "|Image size|${{ steps.build-image.outputs.promotion-image-size }}|" >> $GITHUB_STEP_SUMMARY
        echo "|ðŸ•’ Build duration| ${{ steps.build-image.outputs.build-duration-seconds }} seconds |" >> $GITHUB_STEP_SUMMARY
        
        if [ ! -z "${{ inputs.base-runtime }}" ]; then
          echo "|Base image| ${{ inputs.base-runtime }} |" >> $GITHUB_STEP_SUMMARY
        fi

        extraArgs=$(echo ${{ inputs.extra-args }})
        if [ ! -z "$extraArgs" ]; then
          echo "|Extra args|${extraArgs}|" >> $GITHUB_STEP_SUMMARY
        fi

        if [ ! -z "${{ inputs.packages }}" ]; then
          echo "|ðŸŒŽ WPM Registry Server| ${{ inputs.wpm-registry-server }}|" >> $GITHUB_STEP_SUMMARY
          echo "|WPM Registry| ${{ inputs.wpm-registry }}|" >> $GITHUB_STEP_SUMMARY
          echo "|ðŸ“¦ Installed WPM Packages|${{ inputs.packages }}|" >> $GITHUB_STEP_SUMMARY
        fi

        if [ ! -z "${{ inputs.custom-packages }}" ]; then
          echo "|Custom Packages Org URL| ${{ inputs.custom-packages-org-url }}|" >> $GITHUB_STEP_SUMMARY
          echo "|ðŸ“¦ Installed Custom Packages|${{ inputs.custom-packages }}|" >> $GITHUB_STEP_SUMMARY
        fi
